// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoadLink.Infrastructure;

#nullable disable

namespace RoadLink.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoadLink.Domain.Alquileres.Alquiler", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("FechaCancelacionAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_cancelacion_alquiler");

                    b.Property<DateTime?>("FechaCompletoAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_completo_alquiler");

                    b.Property<DateTime?>("FechaConfirmacionAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_confirmacion_alquiler");

                    b.Property<DateTime?>("FechaCreacionAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion_alquiler");

                    b.Property<DateTime?>("FechaDeNegacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_de_negacion");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<Guid?>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_alquileres");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_alquileres_usuario_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_alquileres_vehiculo_id");

                    b.ToTable("alquileres", (string)null);
                });

            modelBuilder.Entity("RoadLink.Domain.Comentarios.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AlquilerId")
                        .HasColumnType("uuid")
                        .HasColumnName("alquiler_id");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaHoraCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_hora_creacion");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<Guid?>("VehiculoId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_comentarios");

                    b.HasIndex("AlquilerId")
                        .HasDatabaseName("ix_comentarios_alquiler_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_comentarios_usuario_id");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("ix_comentarios_vehiculo_id");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("RoadLink.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "ReadUser"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "WriteUser"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "UpdateUser"
                        });
                });

            modelBuilder.Entity("RoadLink.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cliente"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("RoadLink.Domain.Roles.RolePermissions", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionID")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleID", "PermissionID")
                        .HasName("pk_roles_permissions");

                    b.HasIndex("PermissionID")
                        .HasDatabaseName("ix_roles_permissions_permission_id");

                    b.ToTable("roles_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            PermissionID = 1
                        },
                        new
                        {
                            RoleID = 2,
                            PermissionID = 2
                        },
                        new
                        {
                            RoleID = 2,
                            PermissionID = 3
                        },
                        new
                        {
                            RoleID = 2,
                            PermissionID = 1
                        });
                });

            modelBuilder.Entity("RoadLink.Domain.Usuarios.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_role");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_user_role_usuario_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("RoadLink.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Apellido")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("apellido");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nombre");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_usuario_email");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("RoadLink.Domain.Vehiculos.Vehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<int[]>("Accesorio")
                        .HasColumnType("integer[]")
                        .HasColumnName("accesorio");

                    b.Property<DateTime?>("FechaUltimoAlquiler")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_ultimo_alquiler");

                    b.Property<string>("Modelo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("modelo");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Vin")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehiculos");

                    b.ToTable("vehiculos", (string)null);
                });

            modelBuilder.Entity("RoadLink.Domain.Alquileres.Alquiler", b =>
                {
                    b.HasOne("RoadLink.Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_alquileres_usuario_usuario_id");

                    b.HasOne("RoadLink.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .HasConstraintName("fk_alquileres_vehiculos_vehiculo_id");

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "Accesorios", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("accesorios_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accesorios_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "PrecioMantenimiento", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_mantenimiento_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_mantenimiento_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "PrecioPorPeriodo", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_por_periodo_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_por_periodo_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "PrecioTotal", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_total_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_total_tipo_moneda");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Alquileres.DateRange", "DuracionAlquiler", b1 =>
                        {
                            b1.Property<Guid>("AlquilerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("Inicio")
                                .HasColumnType("date")
                                .HasColumnName("duracion_alquiler_inicio");

                            b1.Property<DateOnly>("Termino")
                                .HasColumnType("date")
                                .HasColumnName("duracion_alquiler_termino");

                            b1.HasKey("AlquilerId");

                            b1.ToTable("alquileres");

                            b1.WithOwner()
                                .HasForeignKey("AlquilerId")
                                .HasConstraintName("fk_alquileres_alquileres_id");
                        });

                    b.Navigation("Accesorios");

                    b.Navigation("DuracionAlquiler");

                    b.Navigation("PrecioMantenimiento");

                    b.Navigation("PrecioPorPeriodo");

                    b.Navigation("PrecioTotal");
                });

            modelBuilder.Entity("RoadLink.Domain.Comentarios.Comentario", b =>
                {
                    b.HasOne("RoadLink.Domain.Alquileres.Alquiler", null)
                        .WithMany()
                        .HasForeignKey("AlquilerId")
                        .HasConstraintName("fk_comentarios_alquileres_alquiler_id");

                    b.HasOne("RoadLink.Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_comentarios_usuario_usuario_id");

                    b.HasOne("RoadLink.Domain.Vehiculos.Vehiculo", null)
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .HasConstraintName("fk_comentarios_vehiculos_vehiculo_id");
                });

            modelBuilder.Entity("RoadLink.Domain.Roles.RolePermissions", b =>
                {
                    b.HasOne("RoadLink.Domain.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_permissions_permission_id");

                    b.HasOne("RoadLink.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_roles_role_id");
                });

            modelBuilder.Entity("RoadLink.Domain.Usuarios.UserRole", b =>
                {
                    b.HasOne("RoadLink.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_roles_role_id");

                    b.HasOne("RoadLink.Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_usuario_usuario_id");
                });

            modelBuilder.Entity("RoadLink.Domain.Vehiculos.Vehiculo", b =>
                {
                    b.OwnsOne("RoadLink.Domain.Vehiculos.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<Guid>("VehiculoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_ciudad");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_departamento");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_pais");

                            b1.Property<string>("Provincia")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("direccion_provincia");

                            b1.HasKey("VehiculoId");

                            b1.ToTable("vehiculos");

                            b1.WithOwner()
                                .HasForeignKey("VehiculoId")
                                .HasConstraintName("fk_vehiculos_vehiculos_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "Mantenimiento", b1 =>
                        {
                            b1.Property<Guid>("VehiculoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("mantenimiento_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mantenimiento_tipo_moneda");

                            b1.HasKey("VehiculoId");

                            b1.ToTable("vehiculos");

                            b1.WithOwner()
                                .HasForeignKey("VehiculoId")
                                .HasConstraintName("fk_vehiculos_vehiculos_id");
                        });

                    b.OwnsOne("RoadLink.Domain.Shared.Moneda", "Precio", b1 =>
                        {
                            b1.Property<Guid>("VehiculoId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Monto")
                                .HasColumnType("numeric")
                                .HasColumnName("precio_monto");

                            b1.Property<string>("TipoMoneda")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("precio_tipo_moneda");

                            b1.HasKey("VehiculoId");

                            b1.ToTable("vehiculos");

                            b1.WithOwner()
                                .HasForeignKey("VehiculoId")
                                .HasConstraintName("fk_vehiculos_vehiculos_id");
                        });

                    b.Navigation("Direccion");

                    b.Navigation("Mantenimiento");

                    b.Navigation("Precio");
                });
#pragma warning restore 612, 618
        }
    }
}
